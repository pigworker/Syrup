<style>
  .syrup-code {
    display: block;
    font-family: monospace;
    font-size: 17px;
    white-space: pre;
    margin: 1em 0;
  }
  .syrup-happy:before {
    content: "\2705";
    padding: 0 6px 0 0;
  }
  .syrup-comment:before {
    content: "\2705";
    padding: 0 6px 0 0;
  }
  .syrup-warning:before {
    content: "\26A0\FE0F";
    padding: 0 6px 0 0;
  }
  .syrup-error:before {
    content: "\274C";
    padding: 0 6px 0 0;
  }
  .syrup-internal:before {
    content: "\1F480";
    padding: 0 6px 0 0;
  }
</style><br>
<div class="syrup-error">You haven&#39;t defined the circuit <code>undefined</code> just now.</div><br>
<div class="syrup-warning">Circuit <code>undefined</code> has been stubbed out.</div><br>
<div class="syrup-comment">Circuit <code>not</code> is defined.</div><br>
<div class="syrup-happy"><p>Printing <code>not</code>:</p><div class="syrup-code">!&lt;Bit&gt; -&gt; &lt;Bit&gt;
!X = Z where
  Z = nand(X, X)
</div></div><br>
<div class="syrup-happy"><p>Displaying <code>not</code>:</p><script type="module">  import { Graphviz } from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.js";  if (Graphviz) {    const graphviz = await Graphviz.load();    const dot1 = ;    const svg1 = graphviz.dot(dot1);    document.getElementById("GRAPH1").innerHtml = svg1;  }</script><div id="GRAPH1"></div></div><br>
<div class="syrup-comment">Circuit <code>and</code> is defined.</div><br>
<div class="syrup-happy"><p>Printing <code>and</code>:</p><div class="syrup-code">&lt;Bit&gt; &amp; &lt;Bit&gt; -&gt; &lt;Bit&gt;
X &amp; Y = Z where
  A = nand(X, Y)
  Z = !A
</div></div><br>
<div class="syrup-happy"><p>Displaying <code>and</code>:</p><script type="module">  import { Graphviz } from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.js";  if (Graphviz) {    const graphviz = await Graphviz.load();    const dot2 = ;    const svg2 = graphviz.dot(dot2);    document.getElementById("GRAPH2").innerHtml = svg2;  }</script><div id="GRAPH2"></div></div><br>
<div class="syrup-comment">Circuit <code>or</code> is defined.</div><br>
<div class="syrup-happy"><p>Printing <code>or</code>:</p><div class="syrup-code">&lt;Bit&gt; | &lt;Bit&gt; -&gt; &lt;Bit&gt;
X | Y = Z where
  A, B = !X, !Y
  Z = nand(A, B)
</div></div><br>
<div class="syrup-happy"><p>Displaying <code>or</code>:</p><script type="module">  import { Graphviz } from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.js";  if (Graphviz) {    const graphviz = await Graphviz.load();    const dot3 = ;    const svg3 = graphviz.dot(dot3);    document.getElementById("GRAPH3").innerHtml = svg3;  }</script><div id="GRAPH3"></div></div><br>
<div class="syrup-comment">Circuit <code>nor</code> is defined.</div><br>
<div class="syrup-happy"><p>Printing <code>nor</code>:</p><div class="syrup-code">nor(&lt;Bit&gt;, &lt;Bit&gt;) -&gt; &lt;Bit&gt;
nor(X, Y) = !(X | Y)
</div></div><br>
<div class="syrup-happy"><p>Displaying <code>nor</code>:</p><script type="module">  import { Graphviz } from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.js";  if (Graphviz) {    const graphviz = await Graphviz.load();    const dot4 = ;    const svg4 = graphviz.dot(dot4);    document.getElementById("GRAPH4").innerHtml = svg4;  }</script><div id="GRAPH4"></div></div><br>
<div class="syrup-comment">Circuit <code>xor</code> is defined.</div><br>
<div class="syrup-happy"><p>Printing <code>xor</code>:</p><div class="syrup-code">xor(&lt;Bit&gt;, &lt;Bit&gt;) -&gt; &lt;Bit&gt;
xor(X, Y) = Z where
  A, B = X | Y, X &amp; Y
  C = !B
  Z = A &amp; C
</div></div><br>
<div class="syrup-happy"><p>Displaying <code>xor</code>:</p><script type="module">  import { Graphviz } from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.js";  if (Graphviz) {    const graphviz = await Graphviz.load();    const dot5 = ;    const svg5 = graphviz.dot(dot5);    document.getElementById("GRAPH5").innerHtml = svg5;  }</script><div id="GRAPH5"></div></div><br>
<div class="syrup-comment">Circuit <code>hadd</code> is defined.</div><br>
<div class="syrup-happy"><p>Printing <code>hadd</code>:</p><div class="syrup-code">hadd(&lt;Bit&gt;, &lt;Bit&gt;) -&gt; &lt;Bit&gt;, &lt;Bit&gt;
hadd(X1, Y1) = C2, S1 where
  C2 = X1 &amp; Y1
  S1 = xor(X1, Y1)
</div></div><br>
<div class="syrup-happy"><p>Displaying <code>hadd</code>:</p><script type="module">  import { Graphviz } from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.js";  if (Graphviz) {    const graphviz = await Graphviz.load();    const dot6 = ;    const svg6 = graphviz.dot(dot6);    document.getElementById("GRAPH6").innerHtml = svg6;  }</script><div id="GRAPH6"></div></div><br>
<div class="syrup-comment">Circuit <code>fadd</code> is defined.</div><br>
<div class="syrup-happy"><p>Printing <code>fadd</code>:</p><div class="syrup-code">fadd(&lt;Bit&gt;, &lt;Bit&gt;, &lt;Bit&gt;) -&gt; &lt;Bit&gt;, &lt;Bit&gt;
fadd(X1, Y1, C1) = C2, Z1 where
  D2, D1 = hadd(X1, Y1)
  E2, Z1 = hadd(D1, C1)
  C2 = xor(D2, E2)
</div></div><br>
<div class="syrup-happy"><p>Displaying <code>fadd</code>:</p><script type="module">  import { Graphviz } from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.js";  if (Graphviz) {    const graphviz = await Graphviz.load();    const dot7 = ;    const svg7 = graphviz.dot(dot7);    document.getElementById("GRAPH7").innerHtml = svg7;  }</script><div id="GRAPH7"></div></div><br>
<div class="syrup-happy"><p>Truth table for <code>fadd</code>:</p><pre>X1 Y1 C1 | C2 Z1
---------|------
0  0  0  | 0  0 
0  0  1  | 0  1 
0  1  0  | 0  1 
0  1  1  | 1  0 
1  0  0  | 0  1 
1  0  1  | 1  0 
1  1  0  | 1  0 
1  1  1  | 1  1 
</pre></div><br>
<div class="syrup-comment">Type <code>&lt;Bit2&gt;</code> is defined.</div><br>
<div class="syrup-comment">Circuit <code>adc2</code> is defined.</div><br>
<div class="syrup-happy"><p>Printing <code>adc2</code>:</p><div class="syrup-code">adc2([&lt;Bit&gt;, &lt;Bit&gt;], [&lt;Bit&gt;, &lt;Bit&gt;], &lt;Bit&gt;) -&gt; &lt;Bit&gt;, [&lt;Bit&gt;, &lt;Bit&gt;]
adc2([X2, X1], [Y2, Y1], C1) = C4, [Z2, Z1] where
  C2, Z1 = fadd(X1, Y1, C1)
  C4, Z2 = fadd(X2, Y2, C2)
</div></div><br>
<div class="syrup-happy"><p>Displaying <code>adc2</code>:</p><script type="module">  import { Graphviz } from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.js";  if (Graphviz) {    const graphviz = await Graphviz.load();    const dot8 = ;    const svg8 = graphviz.dot(dot8);    document.getElementById("GRAPH8").innerHtml = svg8;  }</script><div id="GRAPH8"></div></div><br>
<div class="syrup-comment">Circuit <code>one</code> is defined.</div><br>
<div class="syrup-happy"><p>Printing <code>one</code>:</p><div class="syrup-code">one() -&gt; &lt;Bit&gt;
one() = !zero()
</div></div><br>
<div class="syrup-happy"><p>Displaying <code>one</code>:</p><script type="module">  import { Graphviz } from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.js";  if (Graphviz) {    const graphviz = await Graphviz.load();    const dot9 = ;    const svg9 = graphviz.dot(dot9);    document.getElementById("GRAPH9").innerHtml = svg9;  }</script><div id="GRAPH9"></div></div><br>
<div class="syrup-comment">Circuit <code>mux</code> is defined.</div><br>
<div class="syrup-happy"><p>Printing <code>mux</code>:</p><div class="syrup-code">mux(&lt;Bit&gt;, &lt;Bit&gt;, &lt;Bit&gt;) -&gt; &lt;Bit&gt;
mux(C, X, Y) = C &amp; X | !C &amp; Y
</div></div><br>
<div class="syrup-happy"><p>Displaying <code>mux</code>:</p><script type="module">  import { Graphviz } from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.js";  if (Graphviz) {    const graphviz = await Graphviz.load();    const dot10 = ;    const svg10 = graphviz.dot(dot10);    document.getElementById("GRAPH10").innerHtml = svg10;  }</script><div id="GRAPH10"></div></div><br>
<div class="syrup-comment">Circuit <code>adc2par</code> is defined.</div><br>
<div class="syrup-happy"><p>Printing <code>adc2par</code>:</p><div class="syrup-code">adc2par([&lt;Bit&gt;, &lt;Bit&gt;], [&lt;Bit&gt;, &lt;Bit&gt;], &lt;Bit&gt;) -&gt; &lt;Bit&gt;, [&lt;Bit&gt;, &lt;Bit&gt;]
adc2par([X2, X1], [Y2, Y1], C1) = C4, [Z2, Z1] where
  C2, Z1 = fadd(X1, Y1, C1)
  C40, Z20 = fadd(X2, Y2, zero())
  C41, Z21 = fadd(X2, Y2, one())
  C4 = mux(C2, C41, C40)
  Z2 = mux(C2, Z21, Z20)
</div></div><br>
<div class="syrup-happy"><p>Displaying <code>adc2par</code>:</p><script type="module">  import { Graphviz } from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.js";  if (Graphviz) {    const graphviz = await Graphviz.load();    const dot11 = ;    const svg11 = graphviz.dot(dot11);    document.getElementById("GRAPH11").innerHtml = svg11;  }</script><div id="GRAPH11"></div></div>