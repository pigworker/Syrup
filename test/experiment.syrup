not(<Bit>) -> <Bit>
not(X) = nand(X,X)

and(<Bit>, <Bit>) -> <Bit>
and(X,Y) = not(nand(X,Y))

or(<Bit>, <Bit>) -> <Bit>
or(X,Y) = nand(Z, S) where
  Z = not(X)
  S = not(Y)

xor(<Bit>, <Bit>) -> <Bit>
xor(X,Y) = or(L,R) where

  L = and(X,not(Y))
  R = and(not(X),Y)

hadd(<Bit>, <Bit>) -> <Bit>, <Bit>
hadd(X, Y) = X&Y, xor(X,Y)

experiment hadd

fadd(<Bit>, <Bit>, <Bit>) -> <Bit>, <Bit>
fadd(X, Y, CI) = CO, Z where

  C1, XY = hadd(X,Y)
  C2, Z  = hadd(XY,CI)
  CO = C1|C2

experiment fadd

type <Two> = [<Bit>, <Bit>]

adc2(<Two>, <Two>, <Bit>) -> <Bit>, <Two>
adc2([X1, X0], [Y1, Y0], CI) = CO, [Z1, Z0] where

  C1, Z0 = fadd(X0, Y0, CI)
  CO, Z1 = fadd(X1, Y1, C1)

experiment adc2

experiment adc2([10][01] 1; [11][10] 0)

xor1(<Bit>, <Bit>) -> <Bit>
xor1(X,Y) = !X&Y | X&!Y

xor2(<Bit>, <Bit>) -> <Bit>
xor2(X,Y) = (X|Y) & !(X&Y)

experiment xor1 = xor2

experiment xor = or

print adc2