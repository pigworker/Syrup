<style>
  .syrup-code {
    display: block;
    font-family: monospace;
    font-size: 17px;
    white-space: pre;
    margin: 1em 0;
  }
  .syrup-happy:before {
    content: "\2705";
    padding: 0 6px 0 0;
  }
  .syrup-comment:before {
    content: "\2705";
    padding: 0 6px 0 0;
  }
  .syrup-warning:before {
    content: "\26A0\FE0F";
    padding: 0 6px 0 0;
  }
  .syrup-error:before {
    content: "\274C";
    padding: 0 6px 0 0;
  }
  .syrup-internal:before {
    content: "\1F480";
    padding: 0 6px 0 0;
  }

</style>
<div class="syrup-happy">When unit testing <code><code><span class="syrup-function">nand</span></code>(00) = 1</code>:<br>
<div style="padding-left: 2ch">Success!</div></div><br>
<br>
<div class="syrup-happy">When unit testing <code><code><span class="syrup-function">nand</span></code>(11) = 0</code>:<br>
<div style="padding-left: 2ch">Success!</div></div><br>
<br>
<div class="syrup-happy">When unit testing <code><code><span class="syrup-function">dff</span></code>{0}(1) = {1}0</code>:<br>
<div style="padding-left: 2ch">Success!</div></div><br>
<br>
<div class="syrup-error">When unit testing <code><code><span class="syrup-function">nand</span></code>{0}(00) = 1</code>:<br>
<div style="padding-left: 2ch">Memory for <code><span class="syrup-function">nand</span></code> has type <code>{}</code>.<br>
That can&#39;t store {0}.</div></div><br>
<br>
<div class="syrup-error">When unit testing <code><code><span class="syrup-function">nand</span></code>() = 1</code>:<br>
<div style="padding-left: 2ch">Inputs for <code><span class="syrup-function">nand</span></code> are typed <code>(<span class="syrup-type">&lt;Bit&gt;</span>, <span class="syrup-type">&lt;Bit&gt;</span>)</code>.<br>
That can&#39;t accept <code>()</code>.</div></div><br>
<br>
<div class="syrup-error">When unit testing <code><code><span class="syrup-function">nand</span></code>(00) = {1}0</code>:<br>
<div style="padding-left: 2ch">Memory for <code><span class="syrup-function">nand</span></code> has type <code>{}</code>.<br>
That can&#39;t store {1}.</div></div><br>
<br>
<div class="syrup-error">When unit testing <code><code><span class="syrup-function">nand</span></code>(00) = 00</code>:<br>
<div style="padding-left: 2ch">Outputs for <code><span class="syrup-function">nand</span></code> are typed <code><span class="syrup-type">&lt;Bit&gt;</span></code>.<br>
That can&#39;t accept <code>0, 0</code>.</div></div><br>
<br>
<div class="syrup-comment">Circuit <code><span class="syrup-function">alternator</span></code> is defined.</div><br>
<br>
<div class="syrup-happy">When unit testing <code><code><span class="syrup-function">alternator</span></code>{0}() = {1}0</code>:<br>
<div style="padding-left: 2ch">Success!</div></div>